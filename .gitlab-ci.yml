default:
  image: node:18-alpine
  before_script:
    - corepack enable
    - yarn install

.docker:
  image: docker:28.0.1
  services:
    - docker:28.0.1-dind
  before_script:
    - echo "Run build"
  #   - echo "$CI_REGISTRY_TOKEN" | docker login -u $CI_REGISTRY_USER --password-stdin

.get_version: &get_version
  - "apk update && apk add bash"
  - 'export PROJECT_VERSION=$(cat package.json | grep version | head -1 | awk -F: ''{ print $2 }'' | sed ''s/[",]//g'' | tr -d ''[[:space:]]'')'
  - 'echo "Current version is: $PROJECT_VERSION"'

.prepare-ssh:
  before_script:
    - "command -v ssh-agent >/dev/null || ( apk add --update openssh )"
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p 2219 $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - install
  - tests
  - build
  - release
  - deploy

Install deps:
  stage: install
  script:
    - yarn
  cache:
    untracked: true
    paths:
      - node_modules/
      - .yarn
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
Unit tests:
  stage: tests
  needs:
    - Install deps
  script:
    - yarn turbo test:ci
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: false
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      allow_failure: true
E2E tests:
  stage: tests
  image: mcr.microsoft.com/playwright:v1.51.0-noble
  needs:
    - Install deps
  script:
    - CI=true yarn turbo e2e
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: false
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      allow_failure: true

# Staging images

Build web (staging):
  extends: .docker
  stage: build
  needs:
    - Unit tests
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  script:
    - docker build -f apps/web/Dockerfile --build-arg VERSION=$CI_COMMIT_SHORT_SHA -t $CI_IMAGE_TAG_WEB:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_IMAGE_TAG_WEB:$CI_COMMIT_SHORT_SHA
  tags:
    - staging
  environment: staging

Build bot (staging):
  extends: .docker
  stage: build
  needs:
    - Unit tests
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  script:
    - docker build -f apps/bot/Dockerfile --build-arg VERSION=$CI_COMMIT_SHORT_SHA -t $CI_IMAGE_TAG_BOT:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_IMAGE_TAG_BOT:$CI_COMMIT_SHORT_SHA
  tags:
    - staging
  environment: staging

# Production images

Build web:
  extends: .docker
  stage: build
  needs:
    - Unit tests
    - E2E tests
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - *get_version
    - docker build -f apps/web/Dockerfile --build-arg VERSION=$PROJECT_VERSION -t $CI_IMAGE_TAG_WEB:$PROJECT_VERSION -t $CI_IMAGE_TAG_WEB:latest .
    - docker push $CI_IMAGE_TAG_WEB --all-tags
  tags:
    - production
  environment: production

Build bot:
  extends: .docker
  stage: build
  needs:
    - Unit tests
    - E2E tests
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - *get_version
    - docker build -f apps/bot/Dockerfile --build-arg VERSION=$PROJECT_VERSION -t $CI_IMAGE_TAG_BOT:$PROJECT_VERSION -t $CI_IMAGE_TAG_BOT:latest .
    - docker push $CI_IMAGE_TAG_BOT --all-tags
  tags:
    - production
  environment: production

# Deploy

Deploy (staging):
  image: alpine:latest
  stage: deploy
  needs:
    - Build web (staging)
    - Build bot (staging)
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  extends: .prepare-ssh
  script:
    - ssh -p 2219 $SSH_USER@$SSH_HOST "cd $SSH_PATH
      && ./scripts/down-staging.sh
      && ./scripts/deploy-staging.sh $CI_COMMIT_SHORT_SHA"
  environment:
    name: staging
    url: $PUBLIC_URL_STAGING
  tags:
    - staging

Deploy:
  image: alpine:latest
  stage: deploy
  needs:
    - Build web
    - Build bot
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  extends: .prepare-ssh
  script:
    - *get_version
    - ssh -p 2219 $SSH_USER@$SSH_HOST "cd $SSH_PATH
      && ./scripts/down.sh
      && ./scripts/deploy.sh $PROJECT_VERSION"
  environment:
    name: production
    url: $PUBLIC_URL_PRODUCTION
  tags:
    - production

# Release

Release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - echo "Prepare release..."
  script:
    - echo "Running the release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "Release $CI_COMMIT_TAG"
    description: "./CHANGELOG.md"
