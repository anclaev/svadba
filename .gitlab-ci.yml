default:
  image: node:18-alpine
  before_script:
    - corepack enable
    - yarn install

.docker:
  image: docker:28.0.1
  services:
    - docker:28.0.1-dind
  before_script:
    - echo "$CI_REGISTRY_TOKEN" | docker login -u $CI_REGISTRY_USER --password-stdin

# .get-version: &get-version
#   - "apk update && apk add bash"
#   - 'export PROJECT_VERSION=$(cat package.json | grep version | head -1 | awk -F: ''{ print $2 }'' | sed ''s/[",]//g'' | tr -d ''[[:space:]]'')'
#   - 'echo "Current version is: $PROJECT_VERSION"'

.prepare-ssh:
  before_script:
    - "command -v ssh-agent >/dev/null || ( apk add --update openssh )"
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p 2219 $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CI: true
  YARN_ENABLE_IMMUTABLE_INSTALLS: false

stages:
  - install
  - build
  - test
  - deploy
  - release

install-deps-job:
  stage: install
  script:
    - yarn
  cache:
    untracked: true
    paths:
      - node_modules/
      - .yarn
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE == 'push'

# Build apps

build-apps-job:
  stage: build
  needs:
    - install-deps-job
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_PIPELINE_SOURCE == 'push'
  script:
    - yarn turbo build --filter=api --filter=bot --filter=web

# Build staging images

build-web-staging-job:
  extends: .docker
  stage: build
  needs:
    - install-deps-job
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE == 'push'
  script:
    - docker build -f apps/web/Dockerfile --build-arg VERSION=$CI_COMMIT_SHORT_SHA --build-arg SENTRY_AUTH_TOKEN=$WEB_SENTRY_AUTH_TOKEN -t $CI_IMAGE_TAG_WEB:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_IMAGE_TAG_WEB:$CI_COMMIT_SHORT_SHA
  tags:
    - staging
  environment: staging

build-api-staging-job:
  extends: .docker
  stage: build
  needs:
    - install-deps-job
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE == 'push'
  script:
    - docker build -f apps/api/Dockerfile --build-arg VERSION=$CI_COMMIT_SHORT_SHA -t $CI_IMAGE_TAG_API:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_IMAGE_TAG_API:$CI_COMMIT_SHORT_SHA
  tags:
    - staging
  environment: staging

build-bot-staging-job:
  extends: .docker
  stage: build
  needs:
    - install-deps-job
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE == 'push'
  script:
    - docker build -f apps/bot/Dockerfile --build-arg VERSION=$CI_COMMIT_SHORT_SHA -t $CI_IMAGE_TAG_BOT:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_IMAGE_TAG_BOT:$CI_COMMIT_SHORT_SHA
  tags:
    - staging
  environment: staging

# # Build production images

build-web-job:
  extends: .docker
  stage: build
  needs:
    - install-deps-job
  only:
    - tags
  script:
    - docker build -f apps/web/Dockerfile --build-arg VERSION=$CI_COMMIT_TAG --build-arg SENTRY_AUTH_TOKEN=$WEB_SENTRY_AUTH_TOKEN -t $CI_IMAGE_TAG_WEB:$CI_COMMIT_TAG -t $CI_IMAGE_TAG_WEB:latest .
    - docker push $CI_IMAGE_TAG_WEB --all-tags
  tags:
    - production
  environment: production

build-api-job:
  extends: .docker
  stage: build
  needs:
    - install-deps-job
  only:
    - tags
  script:
    - docker build -f apps/api/Dockerfile --build-arg VERSION=$CI_COMMIT_TAG -t $CI_IMAGE_TAG_API:$CI_COMMIT_TAG -t $CI_IMAGE_TAG_API:latest .
    - docker push $CI_IMAGE_TAG_API --all-tags
  tags:
    - production
  environment: production

build-bot-job:
  extends: .docker
  stage: build
  needs:
    - install-deps-job
  only:
    - tags
  script:
    - docker build -f apps/bot/Dockerfile --build-arg VERSION=$CI_COMMIT_TAG -t $CI_IMAGE_TAG_BOT:$CI_COMMIT_TAG -t $CI_IMAGE_TAG_BOT:latest .
    - docker push $CI_IMAGE_TAG_BOT --all-tags
  tags:
    - production
  environment: production

# Tests

test-unit-job:
  stage: test
  needs:
    - install-deps-job
  script:
    - yarn turbo test:ci
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE == 'push'

test-server-job:
  stage: test
  needs:
    - install-deps-job
  variables:
    ENVS: $TEST_SERVER_ENV
  script:
    - echo "$ENVS" >> ./apps/api/.env && echo 'VERSION=$CI_COMMIT_SHORT_SHA' >> ./apps/api/.env
    - yarn turbo build --filter=api
    - CI=true yarn turbo test:server
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE == 'push'

test-e2e-staging-job:
  extends: .docker
  stage: test
  needs:
    - build-web-staging-job
    - build-bot-staging-job
    - build-api-staging-job
  when: on_success
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE == 'push'
  allow_failure: true
  variables:
    ENVS: $TEST_ENV
  script:
    - echo "$ENVS" >> ./deployment/test/.env && echo 'VERSION=$CI_COMMIT_SHORT_SHA' >> ./deployment/test/.env
    - chmod u+x ./deployment/_scripts/db-init.sh && chmod u+x ./deployment/_scripts/redis-init.sh
    - docker compose -f ./deployment/test/docker-compose.yml up --attach playwright-runner --exit-code-from playwright-runner

test-e2e-job:
  extends: .docker
  stage: test
  needs:
    - build-web-staging-job
    - build-bot-staging-job
    - build-api-staging-job
  when: on_success
  only:
    - tags
  variables:
    ENVS: $TEST_ENV
  script:
    - echo "$ENVS" >> ./deployment/test/.env && echo 'VERSION=$CI_COMMIT_TAG' >> ./deployment/test/.env
    - chmod u+x ./deployment/_scripts/db-init.sh && chmod u+x ./deployment/_scripts/redis-init.sh
    - docker compose -f ./deployment/test/docker-compose.yml up --attach playwright-runner --exit-code-from playwright-runner

# Deploy

deploy (staging):
  image: alpine:latest
  stage: deploy
  needs:
    - build-api-staging-job
    - build-web-staging-job
    - build-bot-staging-job
    - test-unit-job
    - test-server-job
    - test-e2e-staging-job
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' && $CI_PIPELINE_SOURCE == 'push'
  extends: .prepare-ssh
  script:
    - ssh -p 2219 $SSH_USER@$SSH_HOST "cd $SSH_PATH
      && ./staging/down.sh
      && ./staging/deploy.sh $CI_COMMIT_SHORT_SHA"
  environment:
    name: staging
    url: $PUBLIC_URL_STAGING
  tags:
    - staging

deploy:
  image: alpine:latest
  stage: deploy
  needs:
    - build-api-job
    - build-web-job
    - build-bot-job
    - test-unit-job
    - test-server-job
    - test-e2e-job
  when: on_success
  only:
    - tags
  extends: .prepare-ssh
  script:
    - ssh -p 2219 $SSH_USER@$SSH_HOST "cd $SSH_PATH
      && ./production/down.sh
      && ./production/deploy.sh $CI_COMMIT_TAG"
  environment:
    name: production
    url: $PUBLIC_URL_PRODUCTION
  tags:
    - production

# Release

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - deploy
  when: on_success
  only:
    - tags
  before_script:
    - echo "Prepare release..."
  script:
    - echo "Running the release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "Release $CI_COMMIT_TAG"
    description: "./CHANGELOG.md"
