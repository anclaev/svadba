default:
  image: node:18-alpine
  before_script:
    - corepack enable
    - yarn install

.docker:
  image: docker:28.0.1
  services:
    - docker:28.0.1-dind
  before_script:
    - echo "$CI_REGISTRY_TOKEN" | docker login -u $CI_REGISTRY_USER --password-stdin

.get-version: &get-version
  - "apk update && apk add bash"
  - 'export PROJECT_VERSION=$(cat package.json | grep version | head -1 | awk -F: ''{ print $2 }'' | sed ''s/[",]//g'' | tr -d ''[[:space:]]'')'
  - 'echo "Current version is: $PROJECT_VERSION"'

.prepare-ssh:
  before_script:
    - "command -v ssh-agent >/dev/null || ( apk add --update openssh )"
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p 2219 $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CI: true
  YARN_ENABLE_IMMUTABLE_INSTALLS: false

stages:
  # - install
  # - build
  - test
  # - release
  # - deploy

# install-deps-job:
#   stage: install
#   script:
#     - yarn
#   cache:
#     untracked: true
#     paths:
#       - node_modules/
#       - .yarn
#   only:
#     - develop
#     - main

# # Build staging images

# build-web-staging-job:
#   extends: .docker
#   stage: build
#   needs:
#     - install-deps-job
#   only:
#     - develop
#   script:
#     - docker build -f apps/web/Dockerfile --build-arg VERSION=$CI_COMMIT_SHORT_SHA --build-arg SENTRY_AUTH_TOKEN=$WEB_SENTRY_AUTH_TOKEN -t $CI_IMAGE_TAG_WEB:$CI_COMMIT_SHORT_SHA .
#     - docker push $CI_IMAGE_TAG_WEB:$CI_COMMIT_SHORT_SHA
#   tags:
#     - staging
#   environment: staging

# build-api-staging-job:
#   extends: .docker
#   stage: build
#   needs:
#     - install-deps-job
#   only:
#     - develop
#   script:
#     - docker build -f apps/api/Dockerfile --build-arg VERSION=$CI_COMMIT_SHORT_SHA -t $CI_IMAGE_TAG_API:$CI_COMMIT_SHORT_SHA .
#     - docker push $CI_IMAGE_TAG_API:$CI_COMMIT_SHORT_SHA
#   tags:
#     - staging
#   environment: staging

# build-bot-staging-job:
#   extends: .docker
#   stage: build
#   needs:
#     - install-deps-job
#   only:
#     - develop
#   script:
#     - docker build -f apps/bot/Dockerfile --build-arg VERSION=$CI_COMMIT_SHORT_SHA -t $CI_IMAGE_TAG_BOT:$CI_COMMIT_SHORT_SHA .
#     - docker push $CI_IMAGE_TAG_BOT:$CI_COMMIT_SHORT_SHA
#   tags:
#     - staging
#   environment: staging

# # Build production images

# build-web-job:
#   extends: .docker
#   stage: build
#   needs:
#     - install-deps-job
#   only:
#     - main
#   script:
#     - *get-version
#     - docker build -f apps/web/Dockerfile --build-arg VERSION=$PROJECT_VERSION -t $CI_IMAGE_TAG_WEB:$PROJECT_VERSION -t $CI_IMAGE_TAG_WEB:latest .
#     - docker push $CI_IMAGE_TAG_WEB --all-tags
#   tags:
#     - production
#   environment: production

# build-api-job:
#   extends: .docker
#   stage: build
#   needs:
#     - install-deps-job
#   only:
#     - main
#   script:
#     - *get-version
#     - docker build -f apps/api/Dockerfile --build-arg VERSION=$PROJECT_VERSION -t $CI_IMAGE_TAG_API:$PROJECT_VERSION -t $CI_IMAGE_TAG_API:latest .
#     - docker push $CI_IMAGE_TAG_API --all-tags
#   tags:
#     - production
#   environment: production

# build-bot-job:
#   extends: .docker
#   stage: build
#   needs:
#     - install-deps-job
#   only:
#     - main
#   script:
#     - *get-version
#     - docker build -f apps/bot/Dockerfile --build-arg VERSION=$PROJECT_VERSION -t $CI_IMAGE_TAG_BOT:$PROJECT_VERSION -t $CI_IMAGE_TAG_BOT:latest .
#     - docker push $CI_IMAGE_TAG_BOT --all-tags
#   tags:
#     - production
#   environment: production

# Tests

# test-unit-job:
#   stage: test
#   needs:
#     - install-deps-job
#   script:
#     - yarn turbo test:ci
#   only:
#     - develop
#     - main

# test-server-job:
#   stage: test
#   needs:
#     - install-deps-job
#   script:
#     - yarn turbo build --filter=api
#     - CI=true yarn turbo test:server
#   only:
#     - develop
#     - main

test-e2e-job:
  extends: .docker
  stage: test
  # needs:
  #   - build-web-staging-job
  #   - build-bot-staging-job
  #   - build-api-staging-job
  variables:
    TEST_ENV: $TEST_ENV
  script:
    # - *get-version
    - echo $TEST_ENV >> ./docker/test/.env && echo VERSION=528e91c1 >> ./docker/test/.env
    - docker compose -f ./docker/test/docker-compose.yml up --attach playwright-runner --exit-code-from playwright-runner
  artifacts:
    paths:
      - playwright-report/
    expire_in: 1 week
  only:
    - develop
    - main
# Deploy

# deploy (staging):
#   image: alpine:latest
#   stage: deploy
#   needs:
#     - build api (staging)
#     - build web (staging)
#     - build bot (staging)
#     - unit tests
#     - e2e tests
#   only:
#     - develop
#   when: on_success
#   extends: .prepare-ssh
#   script:
#     - ssh -p 2219 $SSH_USER@$SSH_HOST "cd $SSH_PATH
#       && ./scripts/down-staging.sh
#       && ./scripts/deploy-staging.sh $CI_COMMIT_SHORT_SHA"
#   environment:
#     name: staging
#     url: $PUBLIC_URL_STAGING
#   tags:
#     - staging

# deploy:
#   image: alpine:latest
#   stage: deploy
#   needs:
#     - build api
#     - build web
#     - build bot
#     - unit tests
#     - e2e tests
#   only:
#     - main
#   when: on_success
#   extends: .prepare-ssh
#   script:
#     - *get-version
#     - ssh -p 2219 $SSH_USER@$SSH_HOST "cd $SSH_PATH
#       && ./scripts/down.sh
#       && ./scripts/deploy.sh $PROJECT_VERSION"
#   environment:
#     name: production
#     url: $PUBLIC_URL_PRODUCTION
#   tags:
#     - production

# # Release

# release:
#   stage: release
#   image: registry.gitlab.com/gitlab-org/release-cli:latest
#   only:
#     - tags
#   before_script:
#     - echo "Prepare release..."
#   script:
#     - echo "Running the release job."
#   release:
#     tag_name: $CI_COMMIT_TAG
#     name: "Release $CI_COMMIT_TAG"
#     description: "./CHANGELOG.md"
