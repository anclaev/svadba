default:
  image: node:18-alpine
  services:
    - docker:28.0.1-dind
  before_script:
    - echo "$CI_REGISTRY_TOKEN" | docker login -u $CI_REGISTRY_USER --password-stdin

.docker:
  image: docker:28.0.1

variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - install
  # - build
  - tests
  # - push
  # - analyze
  # - deploy

Install deps:
  stage: install
  script:
    - corepack enable
    - yarn
  cache:
    untracked: true
    paths:
      - node_modules/
      - .yarn

# Build apps:
#   stage: build
#   needs:
#     - Install deps
#   script:
#     - yarn turbo build --affected
#   cache:
#     untracked: true
#     path:
#       - apps/web/.next/standalone
#       - apps/web/.next/static
#       - apps/bot/dist

Unit tests:
  stage: tests
  needs:
    - Install deps
  script:
    - yarn turbo test:ci
  artifacts:
    when: always
    paths:
      - apps/bot/junit.xml
      - apps/web/junit.xml

E2E tests:
  stage: tests
  needs:
    - Install deps
  script:
    - yarn playwright install
    - CI=true yarn turbo e2e
# Unit tests:
#   stage: tests
#   needs:
#     - Build apps
#   image: oven/bun:alpine
#   script: bun run test:ci
#   coverage: /All files[^|]*|[^|]*\s+([\d\.]+)/
#   artifacts:
#     when: always
#     paths:
#       - junit.xml
#     reports:
#       junit: junit.xml
#       coverage_report:
#         coverage_format: cobertura
#         path: coverage/cobertura-coverage.xml

# e2e tests:
#   stage: tests
#   needs:
#     - install & lint
#   image: oven/bun:alpine
#   before_script:
#     - bun playwright install
#   script: CI=true bun playwright test
#   artifacts:
#     when: always
#     paths:
#       - junit-e2e.xml
#     reports:
#       junit: junit-e2e.xml

# analyze code:
#   stage: analyze
#   needs:
#     - unit tests
#   services:
#     - docker:28.0.1-dind
#   image:
#     name: sonarsource/sonar-scanner-cli:11
#     entrypoint: [""]
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
#     GIT_DEPTH: "0"
#   script:
#     - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
#   allow_failure: false
#   rules:
#     - if: $CI_COMMIT_BRANCH == 'main'
#     - if: $CI_COMMIT_BRANCH == 'develop'

# build image (dev):
#   extends: .docker
#   stage: push
#   needs:
#     - unit tests
#   rules:
#     - if: $CI_COMMIT_BRANCH == "develop"
#   script:
#     - docker build -f docker/Dockerfile -t $CI_IMAGE_TAG:$CI_COMMIT_SHORT_SHA .
#     - docker push $CI_IMAGE_TAG:$CI_COMMIT_SHORT_SHA
#   tags:
#     - development
#   environment: development

# build image:
#   extends: .docker
#   stage: push
#   needs:
#     # - analyze code
#     - e2e tests
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#   script:
#     - docker build -f docker/Dockerfile -t $CI_IMAGE_TAG:latest .
#     - docker push $CI_IMAGE_TAG:latest
#   tags:
#     - production
#   environment: production
