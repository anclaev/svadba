datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

enum Side {
  GROOM // Жених
  BRIDE // Невеста
}

enum UserStatus {
  CREATED // Создан
  ACCEPTED // Подтверждён
  BLOCKED // Заблокирован
}

enum UserRole {
  PUBLIC // Обыкновенный
  ADMIN // Администратор
}

enum GuestRole {
  GUEST // Гость
  PARENT // Родитель
  CLOSE // Близкий
  GROOM // Жених
  BRIDE // Невеста
}

model User {
  id                 Int              @id @default(autoincrement())
  telegramId         Int?             @unique @map("telegram_id")
  status             UserStatus       @default(CREATED)
  role               UserRole         @default(PUBLIC)
  login              String           @unique
  password           String
  name               String
  isTelegramVerified Boolean          @default(false) @map("telegram_verified")
  createdAt          DateTime?        @default(now()) @map("created_at")
  guest              Guest?
  uploads            Upload[]
  externalLinks      ExternalLink[]
  dresscodeColors    DresscodeColor[]
  timingEvents       TimingEvent[]
}

model Guest {
  id        Int        @id @default(autoincrement())
  side      Side
  role      GuestRole? @default(GUEST)
  answers   Json?
  createdAt DateTime?  @default(now()) @map("created_at")
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique @map("user_id")
}

model Upload {
  id        Int           @id @default(autoincrement())
  url       String
  name      String
  filename  String
  ext       String
  mimetype  String?
  createdAt DateTime      @default(now()) @map("created_at")
  events    TimingEvent[] @ignore
  owner     User          @relation(fields: [ownerId], references: [id])
  ownerId   Int           @map("owner_id")
}

model TimingEvent {
  id        Int      @id @default(autoincrement())
  order     Int      @unique
  title     String
  time      String
  isPublic  Boolean  @default(true) @map("public")
  createdAt DateTime @default(now()) @map("created_at")
  icon      Upload?  @relation(fields: [iconId], references: [id])
  iconId    Int?     @map("icon_id")
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int      @map("owner_id")
}

model DresscodeColor {
  id          Int      @id @default(autoincrement())
  hex         String   @unique
  description String?
  isHidden    Boolean  @default(false) @map("hidden")
  createdAt   DateTime @default(now()) @map("created_at")
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     Int      @map("owner_id")
}

model ExternalLink {
  id        Int      @id @default(autoincrement())
  url       String
  name      String
  alias     String
  createdAt DateTime @default(now()) @map("created_at")
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int      @map("owner_id")
}
