name: CI

on:
  push:
    tags:
      - 'v*'
    branches:
      - '*'
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'deployment/**'
      - '.github/**'
  workflow_dispatch:

env:
  NODE_VERSION: 20
  DOKPLOY_API_KEY: ${{ secrets.DOKPLOY_API_KEY }}
  DOKPLOY_HOST: ${{ secrets.DOKPLOY_HOST }}
  DOKPLOY_COMPOSE_ID_STAGING: ${{ secrets.DOKPLOY_COMPOSE_ID_STAGING }}
  DOKPLOY_COMPOSE_ID_PRODUCTION: ${{ secrets.DOKPLOY_COMPOSE_ID_PRODUCTION }}

jobs:
  install:
    name: Установка зависимостей
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Установка Node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
      - run: |
          corepack enable

      - name: Подготовка кэша
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Установка зависимостей
        run: yarn

  build:
    name: Сборка сервисов
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4

      - name: Установка Node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
      - run: |
          corepack enable

      - name: Подготовка кэша
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Сборка сервисов
        run: yarn turbo build --filter=api --filter=bot --filter=web

      - name: Загрузка артефактов
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            apps/*/dist
            packages/*/dist
            apps/*/generated
            .turbo/cache

  build-api:
    name: Сборка образа API
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4

      - name: Логин в Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CI_REGISTRY_USERNAME }}
          password: ${{ secrets.CI_REGISTRY_TOKEN }}

      - name: Сборка образа / Staging
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -f apps/api/Dockerfile --build-arg VERSION=$GITHUB_SHA -t ${{ secrets.CI_IMAGE_TAG_API }}:$GITHUB_SHA .
          docker push ${{ secrets.CI_IMAGE_TAG_API }}:$GITHUB_SHA

      - name: Сборка образа / Production
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          docker build -f apps/api/Dockerfile --build-arg VERSION=${GITHUB_REF/refs\/tags\//} -t ${{ secrets.CI_IMAGE_TAG_API }}:$GITHUB_SHA -t ${{ secrets.CI_IMAGE_TAG_API }}:${GITHUB_REF/refs\/tags\//} -t ${{ secrets.CI_IMAGE_TAG_API }}:latest .
          docker push ${{ secrets.CI_IMAGE_TAG_API }} --all-tags

  build-bot:
    name: Сборка образа Bot
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4

      - name: Логин в Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CI_REGISTRY_USERNAME }}
          password: ${{ secrets.CI_REGISTRY_TOKEN }}

      - name: Сборка образа / Staging
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -f apps/bot/Dockerfile --build-arg VERSION=$GITHUB_SHA -t ${{ secrets.CI_IMAGE_TAG_BOT }}:$GITHUB_SHA .
          docker push ${{ secrets.CI_IMAGE_TAG_BOT }}:$GITHUB_SHA

      - name: Сборка образа / Production
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          docker build -f apps/bot/Dockerfile --build-arg VERSION=${GITHUB_REF/refs\/tags\//} -t ${{ secrets.CI_IMAGE_TAG_BOT }}:$GITHUB_SHA -t ${{ secrets.CI_IMAGE_TAG_BOT }}:${GITHUB_REF/refs\/tags\//} -t ${{ secrets.CI_IMAGE_TAG_BOT }}:latest .
          docker push ${{ secrets.CI_IMAGE_TAG_BOT }} --all-tags

  build-web:
    name: Сборка образа Web
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v4

      - name: Логин в Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CI_REGISTRY_USERNAME }}
          password: ${{ secrets.CI_REGISTRY_TOKEN }}

      - name: Сборка образа / Staging
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -f apps/web/Dockerfile --build-arg VERSION=$GITHUB_SHA -t ${{ secrets.CI_IMAGE_TAG_WEB }}:$GITHUB_SHA .
          docker push ${{ secrets.CI_IMAGE_TAG_WEB }}:$GITHUB_SHA

      - name: Сборка образа / Production
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          docker build -f apps/web/Dockerfile --build-arg VERSION=${GITHUB_REF/refs\/tags\//} -t ${{ secrets.CI_IMAGE_TAG_WEB }}:$GITHUB_SHA -t ${{ secrets.CI_IMAGE_TAG_WEB }}:${GITHUB_REF/refs\/tags\//} -t ${{ secrets.CI_IMAGE_TAG_WEB }}:latest .
          docker push ${{ secrets.CI_IMAGE_TAG_WEB }} --all-tags

  test-unit:
    name: Юнит-тесты
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Установка Node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
      - run: |
          corepack enable

      - name: Подготовка кэша
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Получение артефактов
        uses: actions/download-artifact@v4
        with:
          name: dist

      - name: Запуск тестов
        run: yarn turbo test:ci

  test-server:
    name: Серверные тесты
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Установка Node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'
      - run: |
          corepack enable

      - name: Подготовка кэша
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Получение артефактов
        uses: actions/download-artifact@v4
        with:
          name: dist

      - name: Подготовка конфигурации
        run: |
          echo "${{ secrets.TEST_SERVER_ENV }}" >> ./apps/api/.env
          echo 'VERSION=$GITHUB_SHA' >> ./apps/api/.env

      - name: Запуск тестов
        run: CI=true yarn turbo test:server

  test-e2e:
    name: E2E-тесты
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    continue-on-error: true
    needs:
      - build-api
      - build-bot
      - build-web
    steps:
      - uses: actions/checkout@v4

      - name: Подготовка конфигурации
        run: |
          echo "${{ secrets.TEST_E2E_ENV }}" >> ./deployment/test/.env && echo 'VERSION=$GITHUB_SHA' >> ./deployment/test/.env

          chmod u+x ./deployment/_scripts/db-init.sh && chmod u+x ./deployment/_scripts/redis-init.sh

      - name: Запуск тестов
        run: docker compose -f ./deployment/test/docker-compose.yml up --attach playwright-runner --exit-code-from playwright-runner

  deploy-staging:
    name: Деплой / Staging
    if: |
      github.ref == 'refs/heads/main' &&
      !contains(github.event.head_commit.message, 'skip deploy') &&
      !contains(github.event.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    needs:
      - test-unit
      - test-server
      - test-e2e
    steps:
      - name: Получение конфигурации сервисов
        id: fetch-config
        run: |
          curl -s -H "x-api-key: $DOKPLOY_API_KEY" "$DOKPLOY_HOST/api/compose.one?composeId=$DOKPLOY_COMPOSE_ID_STAGING" -o response.json

          ENV_CONFIG=$(jq -r '.env' response.json)

          echo "::add-mask::$ENV_CONFIG"

          echo "RAW_ENV_CONFIG<<EOF" >> $GITHUB_ENV
          echo "$ENV_CONFIG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          rm response.json

          echo "Configuration fetched successfully (content masked)"

      - name: Обновление версии сервисов
        id: update-version
        run: |
          echo "::add-mask::$GITHUB_SHA"
          echo "::add-mask::$DOKPLOY_COMPOSE_ID_STAGING"

          UPDATED_ENV=$(echo "$RAW_ENV_CONFIG" | awk -v new_ver="$GITHUB_SHA" '
            BEGIN { FS="="; OFS="=" }
            $1 == "VERSION" { $2 = new_ver }
            { print }
          ')

          echo "UPDATED_ENV_CONFIG<<EOF" >> $GITHUB_ENV
          echo "$UPDATED_ENV" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "VERSION field updated with commit SHA"

      - name: Подготовка конфигурации сервисов
        id: prepare-payload
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg env "$UPDATED_ENV_CONFIG" \
            --arg composeId "$DOKPLOY_COMPOSE_ID_STAGING" \
            '{env: $env, composeId: $composeId}')

          echo "::add-mask::$JSON_PAYLOAD"

          echo "DEPLOYMENT_PAYLOAD<<EOF" >> $GITHUB_ENV
          echo "$JSON_PAYLOAD" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "Deployment payload prepared (content masked)"

      - name: Загрузка конфигурации сервисов
        id: send-config
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "x-api-key: $DOKPLOY_API_KEY" \
            -H "Content-Type: application/json" \
            "$DOKPLOY_HOST/api/compose.update" \
            --data "$DEPLOYMENT_PAYLOAD")

          if [ "$STATUS_CODE" -ge 200 ] && [ "$STATUS_CODE" -lt 300 ]; then
            echo "Deployment configuration sent successfully (status: $STATUS_CODE)"
          else
            echo "::error::Failed to send configuration (status: $STATUS_CODE)"
            exit 1
          fi

      - name: Деплой сервисов
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg composeId "$DOKPLOY_COMPOSE_ID_STAGING" \
            '{composeId: $composeId}')

          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "x-api-key: $DOKPLOY_API_KEY" \
            -H "Content-Type: application/json" \
            "$DOKPLOY_HOST/api/compose.deploy" \
            --data "$JSON_PAYLOAD")

          if [ "$STATUS_CODE" -ge 200 ] && [ "$STATUS_CODE" -lt 300 ]; then
            echo "Deploy successfully (status: $STATUS_CODE)"
          else
            echo "::error::Failed to send configuration (status: $STATUS_CODE)"
            exit 1
          fi

  deploy-production:
    name: Деплой / Production
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
      needs.test-unit.result == 'success' &&
      needs.test-server.result == 'success' &&
      needs.test-e2e.result == 'success'
    runs-on: ubuntu-latest
    needs:
      - test-unit
      - test-server
      - test-e2e
    steps:
      - name: Получение конфигурации сервисов
        id: fetch-config
        run: |
          curl -s -H "x-api-key: $DOKPLOY_API_KEY" "$DOKPLOY_HOST/api/compose.one?composeId=$DOKPLOY_COMPOSE_ID_PRODUCTION" -o response.json

          ENV_CONFIG=$(jq -r '.env' response.json)

          echo "::add-mask::$ENV_CONFIG"

          echo "RAW_ENV_CONFIG<<EOF" >> $GITHUB_ENV
          echo "$ENV_CONFIG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          rm response.json

          echo "Configuration fetched successfully (content masked)"

      - name: Обновление версии сервисов
        id: update-version
        run: |
          echo "::add-mask::${GITHUB_REF/refs\/tags\//}"
          echo "::add-mask::$DOKPLOY_COMPOSE_ID_PRODUCTION"

          UPDATED_ENV=$(echo "$RAW_ENV_CONFIG" | awk -v new_ver="${GITHUB_REF/refs\/tags\//}" '
            BEGIN { FS="="; OFS="=" }
            $1 == "VERSION" { $2 = new_ver }
            { print }
          ')

          echo "UPDATED_ENV_CONFIG<<EOF" >> $GITHUB_ENV
          echo "$UPDATED_ENV" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "VERSION field updated with release tag"

      - name: Подготовка конфигурации сервисов
        id: prepare-payload
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg env "$UPDATED_ENV_CONFIG" \
            --arg composeId "$DOKPLOY_COMPOSE_ID_PRODUCTION" \
            '{env: $env, composeId: $composeId}')

          echo "::add-mask::$JSON_PAYLOAD"

          echo "DEPLOYMENT_PAYLOAD<<EOF" >> $GITHUB_ENV
          echo "$JSON_PAYLOAD" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "Deployment payload prepared (content masked)"

      - name: Загрузка конфигурации сервисов
        id: send-config
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "x-api-key: $DOKPLOY_API_KEY" \
            -H "Content-Type: application/json" \
            "$DOKPLOY_HOST/api/compose.update" \
            --data "$DEPLOYMENT_PAYLOAD")

          if [ "$STATUS_CODE" -ge 200 ] && [ "$STATUS_CODE" -lt 300 ]; then
            echo "Deployment configuration sent successfully (status: $STATUS_CODE)"
          else
            echo "::error::Failed to send configuration (status: $STATUS_CODE)"
            exit 1
          fi

      - name: Деплой сервисов
        run: |
          JSON_PAYLOAD=$(jq -n \
            --arg composeId "$DOKPLOY_COMPOSE_ID_PRODUCTION" \
            '{composeId: $composeId}')

          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "x-api-key: $DOKPLOY_API_KEY" \
            -H "Content-Type: application/json" \
            "$DOKPLOY_HOST/api/compose.deploy" \
            --data "$JSON_PAYLOAD")

          if [ "$STATUS_CODE" -ge 200 ] && [ "$STATUS_CODE" -lt 300 ]; then
            echo "Deploy successfully (status: $STATUS_CODE)"
          else
            echo "::error::Failed to send configuration (status: $STATUS_CODE)"
            exit 1
          fi

  release:
    name: Релиз
    if: |
      startsWith(github.ref, 'refs/tags/v') && 
      needs.deploy-production.result == 'success'
    runs-on: ubuntu-latest
    needs:
      - deploy-production
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Создание релиза
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: './CHANGELOG.md'
          draft: false
          prerelease: false
